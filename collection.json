{
	"info": {
		"_postman_id": "d73d1220-11ba-463d-b163-6ddd82d26d48",
		"name": "Alphaleaf To-Do List App",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "User",
			"item": [
				{
					"name": "Registering a new user",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var $ = pm.response.json();\r",
									"// Extracting the user token \r",
									"pm.environment.set(\"userToken\", $.token);\r",
									"pm.environment.set(\"userEmail\", $.user.email);\r",
									"\r",
									"\r",
									"// ---- Test ----- \r",
									"pm.test(\"Status code is 201\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify the user name is correct\", function () {\r",
									"    pm.expect($.user.name).to.eql(\"John Doe\");\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\":\"John Doe\",\r\n    \"email\":\"{{$randomEmail}}\",\r\n    \"password\":\"test123!\",\r\n    \"age\":\"25\"\r\n}"
						},
						"url": {
							"raw": "{{baseURL}}/user/register",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"user",
								"register"
							]
						}
					},
					"response": []
				},
				{
					"name": "Login a user",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var $ = pm.response.json();\r",
									"pm.environment.set(\"sessionToken\", $.token);\r",
									"\r",
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"email\":\"{{userEmail}}\",\r\n    \"password\":\"test123!\"\r\n}"
						},
						"url": {
							"raw": "{{baseURL}}/user/login",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"user",
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get logged in user's info",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that user email is returend\", function () {\r",
									"    var $ = pm.response.json();\r",
									"    var email = pm.variables.get(\"userEmail\"); // extract variable data in test scripts\r",
									"    pm.expect($.email).to.eql(email);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{sessionToken}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{baseURL}}/user/me",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"user",
								"me"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update user info",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var $ = pm.response.json();\r",
									"pm.environment.set(\"updatedName\", $.data.name);\r",
									"\r",
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Updated user name contains Dolan\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"Dolan\");\r",
									"});\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{userToken}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\":\"{{$randomFirstName}} Dolan\" \r\n}"
						},
						"url": {
							"raw": "{{baseURL}}/user/me",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"user",
								"me"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get logged in user info to see the updated info",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Updated user name contains Dolan\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"Dolan\");\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{sessionToken}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{baseURL}}/user/me",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"user",
								"me"
							]
						}
					},
					"response": []
				},
				{
					"name": "Upload profile avatar",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{userToken}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "avatar",
									"type": "file",
									"src": "/C:/Users/nijat/Pictures/tarkov/avatar.jpg"
								}
							]
						},
						"url": {
							"raw": "{{baseURL}}/user/me/avatar",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"user",
								"me",
								"avatar"
							]
						}
					},
					"response": []
				},
				{
					"name": "Remove the user avatar",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{userToken}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{baseURL}}/user/me/avatar",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"user",
								"me",
								"avatar"
							]
						}
					},
					"response": []
				},
				{
					"name": "Logout a user",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify logout success message\", function () {\r",
									"    var $ = pm.response.json();\r",
									"    pm.expect($.success).to.eql(true);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{sessionToken}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{baseURL}}/user/logout",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"user",
								"logout"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete a user",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{userToken}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{baseURL}}/user/me",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"user",
								"me"
							]
						}
					},
					"response": []
				},
				{
					"name": "Login a user who was deleted",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"\r",
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"pm.test(\"Body matches string\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"Unable to login\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"email\":\"{{userEmail}}\",\r\n    \"password\":\"test123!\"\r\n}"
						},
						"url": {
							"raw": "{{baseURL}}/user/login",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"user",
								"login"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Tasks",
			"item": [
				{
					"name": "Add a to-do task",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonBody = pm.response.json();\r",
									"var extractedTaskId = jsonBody.data._id;\r",
									"pm.environment.set(\"taskId\", extractedTaskId);\r",
									"\r",
									"\r",
									"pm.test(\"Status code is 201\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that task addition was successful\", function () {\r",
									"    var $ = pm.response.json();\r",
									"    pm.expect($.success).to.eql(true);\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{sessionToken}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"description\": \"{{$randomCatchPhrase}}\"\r\n}"
						},
						"url": {
							"raw": "{{baseURL}}/task",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"task"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get all tasks of a user",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify the description of second task is correct\", function () {\r",
									"    var $ = pm.response.json();\r",
									"    pm.expect($.data[1].description).to.eql(\"teach api testing using postman to Superman\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{sessionToken}}",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{baseURL}}/task",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"task"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get a task identified by ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{sessionToken}}",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{baseURL}}/task/{{taskId}}",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"task",
								"{{taskId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update the task by ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that completion status is true\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.data.completed).to.eql(true);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{sessionToken}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n     \"completed\": true\r\n}"
						},
						"url": {
							"raw": "{{baseURL}}/task/{{taskId}}",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"task",
								"{{taskId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get all the task with completed status",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify the count of completed tasks\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.count).to.eql(2);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{sessionToken}}",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{baseURL}}/task?completed=true",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"task"
							],
							"query": [
								{
									"key": "completed",
									"value": "true"
								}
							]
						}
					},
					"response": []
				}
			]
		}
	]
}